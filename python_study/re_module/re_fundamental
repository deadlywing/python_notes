source from:A.M. Kuchling <amk@amk.ca>
https://docs.python.org/3.5/howto/regex.html#regex-howto

1.metacharacters
. ^ $ * + ? { } [ ] \ | ( )

Matching Characters
1.1     []
1.1.1   They’re used for specifying a character class, which is a set of characters that you wish to match
eg.1     match only lowercase letters,RE would be [a-z]
1.1.2   Metacharacters are not active inside classes
eg.2    [akm$] will match any of the characters 'a', 'k', 'm', or '$'
1.1.3   ^
eg.3     [^5] will  match any character except '5'.

1.2     \
\d
Matches any decimal digit; this is equivalent to the class [0-9].
\D
Matches any non-digit character; this is equivalent to the class [^0-9].
\s
Matches any whitespace character; this is equivalent to the class [ \t\n\r\f\v].
\S
Matches any non-whitespace character; this is equivalent to the class [^ \t\n\r\f\v].
\w
Matches any alphanumeric character; this is equivalent to the class [a-zA-Z0-9_].
\W
Matches any non-alphanumeric character; this is equivalent to the class [^a-zA-Z0-9_].

1.3     .
It matches anything except a newline character
there’s an alternate mode (re.DOTALL) where it will match even a newline.

Repeating Things

1.4     *
It specifies that the previous character can be matched zero or more times, instead of exactly once.
eg.4  ca*t   will match ct (0 a characters), cat (1 a), caaat (3 a characters), and so forth.

1.5     +
matches one or more times
eg.5  ca+t   To use a similar example, ca+t will match cat (1 a), caaat (3 a‘s), but won’t match ct.

1.6     ?
matches either once or zero times
eg.6  home-?brew    matches either homebrew or home-brew.

Greedy
Repetitions such as * are greedy;
when repeating a RE, the matching engine will try to repeat it as many times as possible.
If later portions of the pattern don’t match, the matching engine will then back up and try again with fewer repetitions.
The '*', '+', and '?' qualifiers are all greedy
adding ? after the qualifier makes it perform the match in non-greedy or minimal fashion

1.7     {m,n}
This qualifier means there must be at least m repetitions, and at most n
eg.7   a/{1,3}b      will match a/b, a//b, and a///b

You can omit either m or n; in that case, a reasonable value is assumed for the missing value.
Omitting m is interpreted as a lower limit of 0, while omitting n results in an upper bound of infinity

